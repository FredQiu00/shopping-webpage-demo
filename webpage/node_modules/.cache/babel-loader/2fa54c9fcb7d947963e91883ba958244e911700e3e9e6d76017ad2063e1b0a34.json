{"ast":null,"code":"var _jsxFileName = \"/Users/tianhonggao/Desktop/sample-react/webpage/src/Admin/Statistic.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Stat = () => {\n  _s();\n  ChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip);\n  const [allProducts, setAllProducts] = useState([]);\n  useEffect(() => {\n    fetchDB();\n  }, []);\n  const fetchDB = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api/products', {\n        method: 'GET'\n      });\n      let data = await response.json();\n      setAllProducts(data.filter(item => item.quantity !== 0));\n    } catch (err) {\n      console.error('Failed to fetch products:', err);\n    }\n  };\n\n  // State to hold chart data\n  const [chartData, setChartData] = useState({\n    labels: [],\n    datasets: []\n  });\n  useEffect(() => {\n    const sortedProd = [...allProducts].sort((a, b) => b.sold - a.sold);\n    const labels = sortedProd.map(item => item.prod_name);\n    const data = sortedProd.map(item => item.sold);\n\n    // Set chart data\n    setChartData({\n      labels: labels,\n      datasets: [{\n        data: data,\n        backgroundColor: ['rgba(255, 99, 132, 0.6)', 'rgba(54, 162, 235, 0.6)', 'rgba(255, 206, 86, 0.6)', 'rgba(75, 192, 192, 0.6)', 'rgba(153, 102, 255, 0.6)'\n        // Add more colors if you have many items\n        ],\n\n        borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'\n        // Add more colors if you have many items\n        ],\n\n        borderWidth: 1\n      }]\n    });\n  }, [allProducts]);\n  const optionsForBar = {\n    indexAxis: 'y',\n    elements: {\n      bar: {\n        borderWidth: 2\n      }\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'right'\n      },\n      title: {\n        display: true,\n        text: 'Products Sold (Descending)'\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"600px\",\n      height: \"600px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(Bar, {\n      data: chartData,\n      options: optionsForBar\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(Stat, \"58NHBtlAxoqQYaMGt5Ntvf+bkwo=\");\n_c = Stat;\nexport default Stat;\nvar _c;\n$RefreshReg$(_c, \"Stat\");","map":{"version":3,"names":["React","useEffect","useState","Chart","ChartJS","BarElement","CategoryScale","LinearScale","Title","Tooltip","Bar","jsxDEV","_jsxDEV","Stat","_s","register","allProducts","setAllProducts","fetchDB","response","fetch","method","data","json","filter","item","quantity","err","console","error","chartData","setChartData","labels","datasets","sortedProd","sort","a","b","sold","map","prod_name","backgroundColor","borderColor","borderWidth","optionsForBar","indexAxis","elements","bar","responsive","plugins","legend","position","title","display","text","style","width","height","children","options","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tianhonggao/Desktop/sample-react/webpage/src/Admin/Statistic.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Chart as ChartJS, BarElement, CategoryScale, LinearScale, Title, Tooltip } from 'chart.js';\nimport { Bar } from 'react-chartjs-2';\n\nconst Stat = () => {\n\n  ChartJS.register(BarElement, CategoryScale, LinearScale, Title, Tooltip);\n\n  const [allProducts, setAllProducts] = useState([]);\n\n  useEffect(() => {\n    fetchDB();\n  }, []);\n\n  const fetchDB = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/api/products', {\n        method: 'GET',\n      });\n      let data = await response.json();\n      setAllProducts(data.filter(item => item.quantity !== 0));\n    } catch (err) {\n      console.error('Failed to fetch products:', err);\n    }\n  };\n\n\n  // State to hold chart data\n  const [chartData, setChartData] = useState({ labels: [], datasets: [] });\n\n  useEffect(() => {\n    const sortedProd = [...allProducts].sort((a, b) => b.sold - a.sold);\n    const labels = sortedProd.map(item => item.prod_name);\n    const data = sortedProd.map(item => item.sold);\n\n    // Set chart data\n    setChartData({\n      labels: labels,\n      datasets: [{\n        data: data,\n        backgroundColor: [\n          'rgba(255, 99, 132, 0.6)',\n          'rgba(54, 162, 235, 0.6)',\n          'rgba(255, 206, 86, 0.6)',\n          'rgba(75, 192, 192, 0.6)',\n          'rgba(153, 102, 255, 0.6)',\n          // Add more colors if you have many items\n        ],\n        borderColor: [\n          'rgba(255, 99, 132, 1)',\n          'rgba(54, 162, 235, 1)',\n          'rgba(255, 206, 86, 1)',\n          'rgba(75, 192, 192, 1)',\n          'rgba(153, 102, 255, 1)',\n          // Add more colors if you have many items\n        ],\n        borderWidth: 1,\n      }],\n    });\n\n  }, [allProducts]);\n\n  const optionsForBar = {\n    indexAxis: 'y',\n    elements: {\n      bar: {\n        borderWidth: 2,\n      },\n    },\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'right',\n      },\n      title: {\n        display: true,\n        text: 'Products Sold (Descending)',\n      },\n    },\n  };\n\n  return (\n    <div style={{width: \"600px\", height: \"600px\"}}>\n      <Bar data={chartData} options={optionsForBar}/>\n    </div>\n  );\n};\n\nexport default Stat;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}